/**
 * Copyright 2005-2013 The Kuali Foundation
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.opensource.org/licenses/ecl2.php
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kuali.rice.krad.uif.util;

import java.util.Queue;

import org.kuali.rice.krad.uif.component.Component;
import org.kuali.rice.krad.uif.lifecycle.ViewLifecycle;
import org.kuali.rice.krad.uif.lifecycle.ViewLifecyclePhase;
import org.kuali.rice.krad.uif.lifecycle.ViewLifecycleTask;

/**
 * Interface to be implemented by objects that participates in the view lifecycle. 
 * 
 * @author Kuali Rice Team (rice.collab@kuali.org)
 */
public interface LifecycleElement {

    /**
     * The unique id (within a given tree) for the element.
     *
     * <p>The id is used to identify an element instance within the tree, and 
     * will be used by renderers to set the HTML element id. This gives a way to find various elements
     * for scripting. If the id is not given, a default will be generated by the framework.
     * </p>
     * 
     * <p></p>
     *
     * @return A unique ID for this lifecycle element.
     */
    String getId();
    
    /**
     * Setter for the unique id (within a given tree) for the component
     *
     * @param id - string to set as the component id
     */
    void setId(String id);

    /**
     * Determine if this lifecycle element is mutable.
     * 
     * <p>
     * Most lifecycle element are immutable, and all are immutable expect during initialization
     * and the during the view lifecycle. Those that have been copied within the view lifecycle,
     * however, may be modified during the same lifecycle.
     * </p>
     * 
     * @return True if the component is mutable.
     */
    boolean isMutable(boolean legalBeforeConfiguration);
    
    /**
     * Check for mutability on the element before modifying state.
     * 
     * @param legalDuringInitialization True if the operation is legal during view initialization,
     *        false if the operation is only allowed during the component lifecycle.
     * @throws IllegalStateException If the component is not mutable and the lifecycle is operating
     *         in strict mode.
     * @see ViewLifecycle#isStrict()
     */
    void checkMutable(boolean legalDuringInitialization);
    
    /**
     * Initialize the lifecycle task queue for this component on the given lifecycle phase.
     * 
     * <p>
     * Any tasks added to the queue by this method will be performed after the default lifecycle
     * phase processing method {@link #performInitialization(Object)},
     * {@link #performApplyModel(Object, Component)}, or {@link #performFinalize(Object, Component)}
     * has been called.
     * </p>
     * 
     * @param phase The lifecycle phase to queue pending tasks for.
     * @param pendingTasks The pending task queue.
     */
    void initializePendingTasks(ViewLifecyclePhase phase, Queue<ViewLifecycleTask> pendingTasks);

    /**
     * Initializes the component
     * 
     * <p>
     * Where components can set defaults and setup other necessary state. The initialize method
     * should only be called once per component lifecycle and is invoked within the initialize phase
     * of the view lifecylce.
     * </p>
     * 
     * @param model - object instance containing the view data
     * @see org.kuali.rice.krad.uif.service.ViewHelperService#performInitialization(org.kuali.rice.krad.uif.view.View,
     *      Object)
     * @deprecated Special processing within this method should be replaced by
     *             {@link ViewLifecycleTask} and initialized by
     *             {@link #initializePendingTasks(ViewLifecyclePhase, Queue)}.
     */
    void performInitialization(Object model);

    /**
     * Called after the initialize phase to perform conditional logic based on the model data
     *
     * <p>
     * Where components can perform conditional logic such as dynamically generating new fields or setting field state
     * based on the given data
     * </p>
     *
     * @param model - Top level object containing the data (could be the form or a
     * top level business object, dto)
     * @deprecated Special processing within this method should be replaced by
     *             {@link ViewLifecycleTask} and initialized by
     *             {@link #initializePendingTasks(ViewLifecyclePhase, Queue)}.
     */
    void performApplyModel(Object model, Component parent);

    /**
     * The last phase before the view is rendered
     *
     * <p>
     * Here final preparations can be made based on the updated view state.
     * </p>
     *
     * @param view - view instance that should be finalized for rendering
     * @param model - top level object containing the data
     * @param parent - parent component
     * @deprecated Special processing within this method should be replaced by
     *             {@link ViewLifecycleTask} and initialized by
     *             {@link #initializePendingTasks(ViewLifecyclePhase, Queue)}.
     */
    void performFinalize(Object model, Component parent);

    /**
     * Copy the object
     *
     * @return the copied object
     */
    public <T> T copy();

}
